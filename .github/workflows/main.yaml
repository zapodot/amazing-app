name: Deploy to prod

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: amazing-app
  DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.push-image.outputs.imageid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # ratchet:actions/checkout@v5
        with:
          persist-credentials: false
      - name: Setup Cache
        uses: actions/cache@6f8efc29b200d32929f49075959781ed54ec270c # ratchet:actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Setup Node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # ratchet:actions/setup-node@v5
      - name: Test build & generate tags
        run: |
          npm install
          echo "ACCESS_TOKEN=${{ secrets.DEPLOY_TOKEN }}" > .env
          npm run build
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo IMAGE_TAG=${IMAGE_TAG,,} >> $GITHUB_ENV

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # ratchet:docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # ratchet:docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # ratchet:docker/build-push-action@v6
        id: push-image
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.IMAGE_TAG }}
          push: true

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        run: echo "Deploying image ${{ needs.build.outputs.image }} to production"
      - name: Deploy to prod
        uses: CND-Bergen/cnd-deploy-action@e599456de02dfefb81b2c6bbcf120f103e8effdf # ratchet:CND-Bergen/cnd-deploy-action@main
        with:
          token: ${{ secrets.DEPLOY_TOKEN }}
          image: ${{ needs.build.outputs.image }}
